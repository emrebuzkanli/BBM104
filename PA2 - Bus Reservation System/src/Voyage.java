import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public abstract class Voyage {
    protected int id;
    protected String from;
    protected String to;
    protected int rows;
    protected double basePrice;
    protected List<Boolean> ticketsSold;
    protected double revenue;

    public double getSeatPrice(int seatNumber) {
        return basePrice;
    }

    public String getFrom() {
        return this.from;
    }

    public String getTo() {
        return this.to;
    }
    /**
     * Constructor for creating a voyage.
     * @param id The unique identifier of the voyage.
     * @param from The starting location of the voyage.
     * @param to The destination of the voyage.
     * @param rows The number of rows in the voyage.
     * @param basePrice The base price of the voyage.
     */
    public Voyage(int id, String from, String to, int rows, double basePrice) {
        this.id = id;
        this.from = from;
        this.to = to;
        this.rows = rows;
        this.basePrice = basePrice;
        this.ticketsSold = new ArrayList<>();
        for (int i = 0; i < rows * getSeatsPerRow(); i++) {
            ticketsSold.add(false);
        }
    }
    /**
     * Method to sell a ticket for the voyage.
     * @param seatNumber The seat number to sell the ticket for.
     * @return true if the ticket is successfully sold, false otherwise.
     */
    public boolean sellTicket(int seatNumber) {
        if (seatNumber < 1 || seatNumber > ticketsSold.size() || ticketsSold.get(seatNumber - 1)) {
            return false;
        }
        ticketsSold.set(seatNumber - 1, true);
        revenue += getSeatPrice(seatNumber);
        return true;
    }

    public void refundTicket(int seatNumber) {
        if (seatNumber < 1 || seatNumber > ticketsSold.size() || !ticketsSold.get(seatNumber - 1)) {
            return;
        }
        ticketsSold.set(seatNumber - 1, false);
        revenue -= getRefundAmount(seatNumber);
    }
    /**
     * Abstract method to get the number of seats per row for the voyage.
     * @return The number of seats per row.
     */

    protected abstract int getSeatsPerRow();

    /**
     * Method to get the total number of seats for the voyage.
     * @return The total number of seats.
     */

    public int getSeatsCount() {
        return rows * getSeatsPerRow();
    }

    /**
     * Method to print the details of the voyage.
     * @param writer The PrintWriter object to write the details to.
     */
    public void printVoyageDetails(PrintWriter writer) {

        writer.printf("Voyage %d%n", id);
        writer.printf("%s-%s%n", from, to);
        int seatsPerRow = getSeatsPerRow();
        for (int i = 0; i < ticketsSold.size(); i++) {
            writer.print(ticketsSold.get(i) ? "X" : "*");
            if ((i + 1) % seatsPerRow == 0) writer.println();
            else if ((i + 1) % (seatsPerRow / 2) == 0) writer.print(" ");
        }
    }
    /**
     * Method to print the revenue generated by the voyage.
     * @param writer The PrintWriter object to write the revenue details to.
     */
    public void printRevenue(PrintWriter writer) {
        writer.printf("Revenue: %.2f%n", calculateRevenue());
    }
    /**
     * Method to calculate the revenue generated by the voyage.
     * @return The revenue generated.
     */
    protected double calculateRevenue() {
        return revenue;
    }

    /**
     * Method to print the initialization details of the voyage.
     * @param writer The PrintWriter object to write the initialization details to.
     */

    public void printInitializationDetails(PrintWriter writer) {
        // This method is abstract and must be implemented by subclasses
    }
    /**
     * Abstract method to get the refund amount for a specific seat number.
     * @param seatNumber The seat number to get the refund amount for.
     * @return The refund amount.
     */
    public abstract double getRefundAmount(int seatNumber);

    /**
     * Method to cancel the voyage and refund all sold tickets.
     */

    public void cancelVoyage() {
        double refundAmount = 0.0;
        for (int i = 0; i < ticketsSold.size(); i++) {
            if (ticketsSold.get(i)) {
                refundAmount += getSeatPrice(i + 1);
                ticketsSold.set(i, false);
            }
        }
        revenue -= refundAmount;
    }
    /**
     * Method to check if a ticket was sold for a specific seat number.
     * @param seatNumber The seat number to check.
     * @return true if a ticket was sold, false otherwise.
     */
    public boolean ticketWasSold(int seatNumber) {
        return ticketsSold.get(seatNumber - 1);
    }


}

/**
 * Class representing a premium voyage, extending the Voyage class.
 */

class PremiumVoyage extends Voyage {
    private final double premiumSeatPrice;
    private final int refundPercentage;
    /**
     * Constructor for creating a premium voyage.
     * @param id The unique identifier of the voyage.
     * @param from The starting location of the voyage.
     * @param to The destination of the voyage.
     * @param rows The number of rows in the voyage.
     * @param basePrice The base price of the voyage.
     * @param refundPercentage The refund percentage for the voyage.
     * @param premiumSeatPrice The price of premium seats.
     */

    public PremiumVoyage(int id, String from, String to, int rows, double basePrice, int refundPercentage, double premiumSeatPrice) {
        super(id, from, to, rows, basePrice);
        this.refundPercentage = refundPercentage;
        this.premiumSeatPrice = premiumSeatPrice;
    }

    @Override
    protected int getSeatsPerRow() {
        return 3;
    }
    @Override
    public double getSeatPrice(int seatNumber) {

        if ((seatNumber - 1) % getSeatsPerRow() == 0) {
            return premiumSeatPrice;
        } else {
            return basePrice;
        }
    }
    @Override
    public double getRefundAmount(int seatNumber) {
        double seatPrice = getSeatPrice(seatNumber);
        return seatPrice * (1 - refundPercentage / 100.0);
    }
    @Override
    public void printInitializationDetails(PrintWriter writer) {
        int premiumSeats = this.rows * getSeatsPerRow() / 3;
        int regularSeats = this.rows * getSeatsPerRow() - premiumSeats;


        writer.printf("Voyage %d was initialized as a premium (1+2) voyage from %s to %s with %.2f TL priced %d regular seats and %.2f TL priced %d premium seats. Note that refunds will be %d%% less than the paid amount.%n",
                this.id, this.from, this.to, this.basePrice, regularSeats, premiumSeatPrice, premiumSeats, this.refundPercentage);
    }
    @Override
    public void printVoyageDetails(PrintWriter writer) {
        writer.printf("Voyage %d%n", id);
        writer.printf("%s-%s%n", from, to);
        for (int i = 0; i < ticketsSold.size(); i++) {
            if (i % getSeatsPerRow() == 0 && i != 0) {
                writer.println();
            }


            writer.print(ticketsSold.get(i) ? "X" : "*");


            if ((i + 1) % getSeatsPerRow() == 1) {
                writer.print(" | ");
            } else if ((i + 1) % getSeatsPerRow() != 0) {
                writer.print(" ");
            }
        }
        writer.println();
    }


    }

/**
 * Class representing a standard voyage, extending the Voyage class.
 */

class StandardVoyage extends Voyage {
    private final int refundPercentage;
    /**
     * Constructor for creating a standard voyage.
     * @param id The unique identifier of the voyage.
     * @param from The starting location of the voyage.
     * @param to The destination of the voyage.
     * @param rows The number of rows in the voyage.
     * @param basePrice The base price of the voyage.
     * @param refundPercentage The refund percentage for the voyage.
     */

    public StandardVoyage(int id, String from, String to, int rows, double basePrice, int refundPercentage) {
        super(id, from, to, rows, basePrice);
        this.refundPercentage = refundPercentage;
    }

    @Override
    public double getSeatPrice(int seatNumber) {
        return basePrice;
    }

    @Override
    protected int getSeatsPerRow() {
        return 4;
    }

    @Override
    public double getRefundAmount(int seatNumber) {
        double seatPrice = getSeatPrice(seatNumber);
        return seatPrice * (1 - refundPercentage / 100.0);
    }

    @Override
    public void printInitializationDetails(PrintWriter writer) {
        writer.printf("Voyage %d was initialized as a standard (2+2) voyage from %s to %s with %.2f TL priced %d regular seats. Note that refunds will be %d%% less than the paid amount.%n",
                this.id, this.from, this.to, this.basePrice, this.rows * getSeatsPerRow(), this.refundPercentage);
    }
    @Override
    public void printVoyageDetails(PrintWriter writer) {
        writer.printf("Voyage %d%n", id);
        writer.printf("%s-%s%n", from, to);
        for (int i = 0; i < ticketsSold.size(); i++) {
            if (i % getSeatsPerRow() == 0 && i != 0) writer.println();
            writer.print(ticketsSold.get(i) ? "X" : "*");
            if ((i + 1) % getSeatsPerRow() != 0) writer.print(" ");
            if ((i + 1) % 2 == 0 && (i + 1) % getSeatsPerRow() != 0) writer.print("| ");
        }
        writer.println();

    }

}

/**
 * Class representing a minibus voyage, extending the Voyage class.
 */

class MinibusVoyage extends Voyage {
    /**
     * Constructor for creating a minibus voyage.
     * @param id The unique identifier of the voyage.
     * @param from The starting location of the voyage.
     * @param to The destination of the voyage.
     * @param rows The number of rows in the voyage.
     * @param basePrice The base price of the voyage.
     */
    public MinibusVoyage(int id, String from, String to, int rows, double basePrice) {
        super(id, from, to, rows, basePrice);

    }
    @Override
    public double getRefundAmount(int seatNumber) {
        return 0;
    }
    @Override
    protected int getSeatsPerRow() {
        return 2;
    }
    @Override
    public void refundTicket(int seatNumber) {
        System.out.println("Minibus tickets are not refundable.");
    }
    @Override
    public void printInitializationDetails(PrintWriter writer) {
        writer.printf("Voyage %d was initialized as a minibus (2) voyage from %s to %s with %.2f TL priced %d regular seats. Note that minibus tickets are not refundable.%n",
                id, from, to, basePrice, rows * getSeatsPerRow());
    }
}






